
@mixin bg($color) {
  background-color: $color;
}
//Flex box --------------------//
@mixin display-flex() {
  display: flex;                /* NEW, Spec - Opera 12.1, Firefox 20+ */  
  display: -webkit-box;         /* OLD - iOS 6-, Safari 3.1-6 */
  display: -moz-box;            /* OLD - Firefox 19- (buggy but mostly works) */
  display: -ms-flexbox;         /* TWEENER - IE 10 */
  display: -webkit-flex;        /* NEW - Chrome */
}
@mixin inline-flex {
  display: inline-flex;
  display: -webkit-inline-box;
  display: -moz-inline-box;
  display: -webkit-inline-flex;
  display: -ms-inline-flexbox;
}
@mixin flex-direction($value) {
  @if $value == row {
    -webkit-flex-direction: $value;
    -ms-flex-direction: $value;
    flex-direction: $value;
  }
  @if $value == row-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: horizontal;
    -moz-box-direction: reverse;
    -moz-box-orient: horizontal;
  } @else if $value == column {
    -webkit-box-direction: normal;
    -webkit-box-orient: vertical;
    -moz-box-direction: normal;
    -moz-box-orient: vertical;
  } @else if $value == column-reverse {
    -webkit-box-direction: reverse;
    -webkit-box-orient: vertical;
    -moz-box-direction: reverse;
    -moz-box-orient: vertical;
  } @else {
    -webkit-box-direction: normal;
    -webkit-box-orient: horizontal;
    -moz-box-direction: normal;
    -moz-box-orient: horizontal;
  }
}
@mixin flex-wrap($value: nowrap) {
  // No Webkit/FF Box fallback.
  -webkit-flex-wrap: $value;
  @if $value == nowrap {
    -ms-flex-wrap: none;
  } @else {
    -ms-flex-wrap: $value;
  }
  flex-wrap: $value;
}
@mixin flex-flow($values: (row nowrap)) {
  // No Webkit/FF Box fallback.
  -webkit-flex-flow: $values;
  -ms-flex-flow: $values;
  flex-flow: $values;
}
@mixin justify-content($value: flex-start) {
  @if $value == flex-start {
    -webkit-box-pack: start;
    -moz-box-pack: start;
    -ms-flex-pack: start;
  } @else if $value == flex-end {
    -webkit-box-pack: end;
    -moz-box-pack: end;
    -ms-flex-pack: end;
  } @else if $value == space-between {
    -webkit-box-pack: justify;
    -moz-box-pack: justify;
    -ms-flex-pack: justify;
  } @else if $value == space-around {
    -ms-flex-pack: distribute;
  } @else {
    -webkit-box-pack: $value;
    -moz-box-pack: $value;
    -ms-flex-pack: $value;
  }
  -webkit-justify-content: $value;
  justify-content: $value;
}
@mixin align-items($value: stretch) {
  @if $value == flex-start {
    -webkit-box-align: start;
    -moz-box-align: start;
    -ms-flex-align: start;
  } @else if $value == flex-end {
    -webkit-box-align: end;
    -moz-box-align: end;
    -ms-flex-align: end;
  } @else {
    -webkit-box-align: $value;
    -moz-box-align: $value;
    -ms-flex-align: $value;
  }
  -webkit-align-items: $value;
  align-items: $value;
}
@mixin align-content($value: stretch) {
  // No Webkit Box Fallback.
  -webkit-align-content: $value;
  @if $value == flex-start {
    -ms-flex-line-pack: start;
  } @else if $value == flex-end {
    -ms-flex-line-pack: end;
  } @else {
    -ms-flex-line-pack: $value;
  }
  align-content: $value;
}
@mixin align-self($value: auto) {
  // No Webkit Box Fallback.
  -webkit-align-self: $value;
  @if $value == flex-start {
    -ms-flex-item-align: start;
  } @else if $value == flex-end {
    -ms-flex-item-align: end;
  } @else {
    -ms-flex-item-align: $value;
  }
  align-self: $value;
}
@mixin order($int: 0) {
  -webkit-box-ordinal-group: $int + 1;
  -moz-box-ordinal-group: $int + 1;
  -webkit-order: $int;
  -ms-flex-order: $int;
  order: $int;
}
@mixin flex-grow($int: 1) {
  -webkit-box-flex: $int;
  -moz-box-flex: $int;
  -webkit-flex-grow: $int;
  -ms-flex: $int;
  flex-grow: $int;
}
@mixin flex-shrink($int: 0) {
  -webkit-flex-shrink: $int;
  -moz-flex-shrink: $int;
  -ms-flex: $int;
  flex-shrink: $int;
}
@mixin flex-basis($value: auto) {
  -webkit-flex-basis: $value;
  flex-basis: $value;
}
@mixin flex-grow-shink-basic($fg: 1, $fs: 0, $fb: auto) {
  // Set a variable to be used by box-flex properties
  $fg-boxflex: $fg;
  // Box-Flex only supports a flex-grow value so lets grab the
  // first item in the list and just return that.
  @if type-of($fg) == 'list' {
    $fg-boxflex: nth($fg, 1); 
  }
  -webkit-box: $fg-boxflex;
  -moz-box: $fg-boxflex;
  -webkit-flex: $fg $fs $fb;
  -ms-flex: $fg $fs $fb;
  flex: $fg $fs $fb;
}
//Custom flex container
.flex-container {
  @include display-flex();
  @include flex-direction(row);
  @include flex-wrap(wrap);
  @include justify-content(space-between);
  @include align-items(center);
  @include align-content(center);
  width: 1200px;
  margin-left: auto;
  margin-right: auto;
  padding: 15px;
}
.flex-items:nth-child(1) {
  display: block;
  @include flex-grow(0);
  @include flex-shrink(1);
  @include flex-basis(auto);
  @include align-self(auto);
  @include order(0);
}
.flex-items:nth-child(2) {
  display: block;
  @include flex-grow(0);
  @include flex-shrink(1);
  @include flex-basis(auto);
  @include align-self(auto);
  @include order(0);
}
//---------------------------//
// @mixin background ($name,$color){
//   .bg-#{$name} {
//     background-color: $color;
//   }
// }
// ------ ANIMATION--------//
@mixin animation-name($name) {
  animation-name: $name;
  -webkit-animation-name:$name;       //Chrome 4 ~ 42,Safari 4 ~ 8
  -moz-animation-name: $name;         //Mozilla 5 ~ 15
  -o-animation-name: $name;           
}
@mixin animation-delay ($value) {
  animation-delay: $value;
  -webkit-animation-delay: $value;
  -moz-animation-delay: $value;
  -o-animation-delay: $value;
}
@mixin animation-direction($value) {
  animation-direction:$value;
  -webkit-animation-direction: $value;
  -moz-animation-direction: $value;
  -o-animation-direction: $value;
}
@mixin animation-duration($value) {
animation-duration: $value;
-webkit-animation-duration: $value;
-moz-animation-duration: $value;
-o-animation-duration: $value;
}
@mixin animation-fill-mode($value) {
animation-fill-mode: $value;
-webkit-animation-fill-mode: $value;
-o-animation-fill-mode: $value;
}
@mixin animation-iteration-count($value) {
animation-iteration-count: $value;
-webkit-animation-iteration-count: $value;
-moz-animation-iteration-count: $value;
-o-animation-iteration-count: $value;
}
@mixin animation-play-state($value) {
animation-play-state: $value;
-webkit-animation-play-state: $value;
-moz-animation-play-state: $value;
-o-animation-play-state: $value;
}
@mixin animation-timing-function($value) {
animation-timing-function: $value;
-webkit-animation-timing-function: $value;
-moz-animation-timing-function: $value;
-o-animation-timing-function: $value;
}
@mixin keyframes($animationName) {
  @keyframes #{$animationName} {
    @content;
  }
  @-webkit-keyframes #{$animationName} {
      @content;
  }
  @-moz-keyframes #{$animationName} {
     @content;
  }
  @-o-keyframes #{$animationName} {
     @content;
  }
}